/**
\page page_development_environment Development Environment

<h2>Build Instructions</h2>

Building the Project requires [CMake](http://www.cmake.org/) Version 2.8. See CMake documentation for more information about building using CMake.

Building the Unittests requires [google mock] (http://code.google.com/p/googlemock/) and [google test] (http://code.google.com/p/googletest/).<br>
Building the feature tests (BDD style tests using Gerkhin) requires [Cucumber-cpp] (https://github.com/cucumber/cucumber-cpp) by Paolo Ambrosio, [google test] (http://code.google.com/p/googletest/) and Boost (regex, filesystem, date_time, chrono, thread, system).<br>
Building the Specification/Context tests requires [CppSpec] (https://github.com/tpuronen/cppspec) by Timo Puronen.<br>
Building the BDD style Igloo tests requires [Igloo] (http://igloo-testing.org/) by Joakim Karlsson.<br>

The external dependcies are either
<ul>
<li>downloaded and built using CMake's ExternalProject (Linux)</li>
<li>or provided as selfextracting zip (Windows)</li>
</ul>

<h3>Generate Visual Studio 2010 solution</h3>
Executing the <tt>create_VS_solution.bat</tt> batch file creates a Visual Studio 2010 solution under <em>vs_build</em>.
<em>Note:</em>If cmake is installed but can not be found, provide the path to the bin folder to the script<br>
Usage: <tt>create_VS_solution.bat --cmake_path &lt;path_to_cmake_root&gt;<tt>

<h3>Generate Visual Studio 2012 solution</h3>
Executing the <tt>create_VS_solution.bat</tt> batch file (with argument <tt>VS2012<tt>) creates a Visual Studio 2012 solution under <em>vs_build</em>
<em>Note:</em>If cmake is installed but can not be found, provide the path to the bin folder to the script<br>
Usage: <tt>create_VS_solution.bat VS2012 --cmake_path &lt;path_to_cmake_root&gt;</tt>

<h3>Generate Visual Studio 2013 solution</h3>
Executing the <tt>create_VS_solution.bat</tt> batch file (with argument <tt>VS2013<tt>) creates a Visual Studio 2013 solution under <em>vs_build</em>
<em>Note:</em>If cmake is installed but can not be found, provide the path to the bin folder to the script<br>
Usage: <tt>create_VS_solution.bat VS2013 --cmake_path &lt;path_to_cmake_root&gt;</tt>
<em>Note:</em>Creating a Visual Studio 2013 Solution requires a recent CMake version (> CMake 2.8.11.2)<br>

<h3>Windows (NMake)</h3>
Executing the <tt>build.bat</tt> batch file (with the argument <tt>VS2012<tt> for using the Visual Studio 2012 compiler(MSVC11).) will build the project and all tests with nmake in folder <em>build</em>
<em>Note:</em>If cmake is installed but can not be found, provide the path to the bin folder to the script<br>
Usage: <tt>build.bat VS2012 --cmake_path &lt;path_to_cmake_root&gt;</tt>

Executing the <tt>create_windows_installer.bat</tt> batch file (with argument <tt>VS2012</tt> for using the Visual Studio 2012 compiler(MSVC11).) will build the project in <em>build</em> and create a NSIS installer which is put in folder <em>install</em>.

<h3>Linux</h3>

<ul>
  <li>execute <tt>make prepare</tt></li>
  <li>make any of the targets provided in the <tt>Makefile</tt></li>
    <ul>
      <li>\e all: Build target test unittests and features</li>
      <li>\e clean: Run cmake target clean and delete the output folder (build/)</li>
      <li>\e prepare: Download and build all external dependencies (boost, gmock/gtest, CppSpec, cucumber-cpp)</li>
      <li>\e main: Build the main application</li>
      <li>\e test: Build the individual tests and run cmake target test</li>
      <li>\e unittest: Build a single unit test test runner including all unit tests and run it </li>
      <li>\e specs: Build the CppSpec BDD tests and run it </li>
      <li>\e specs-junit: Build the CppSpec BDD tests and run it with junit (xml) output</li>
      <li>\e igloo-tests: Build the Igloo BDD tests and run it </li>
      <li>\e features: Build the cucumber feature tests and run it</li>
      <li>\e wip-features: Build the cucumber feature tests and run only the WIP features</li>
      <li>\e features-doc: Build the cucumber feature tests and run it producing html output at <em>doc</em></li>
      <li>\e coverage: Build and run the unit test test runner and feature tests with coverage measurement enabled. Generates coverage reports which can be found in <em>reports/coverage</em> and JUnit compatible test result reports in <em>reportsreports/tests</em></li>
      <li>\e memcheck: Build and run the feature tests with valgrind. A report is generated in <em>reports</em></li>
      <li>\e cppcheck: Run the [cppcheck] (http://cppcheck.sourceforge.net/) static code analysis. A report is generated in <em>reports</em></li>
      <li>\e rats: Run the [RATS] (http://code.google.com/p/rough-auditing-tool-for-security/) static code analysis. A report is generated in <em>reports</em></li>
      <li>\e sonar-runner: Make target coverage, memcheck, rats and cppcheck and publish the reports on the [SonarQube] (http://www.sonarqube.org/) server </li>
      <li>\e doc: Run doxygen and generate a html documentation in <em>doc/html</em></li>
      <li>\e install: Install target</li>
      <li>\e package: Create a installer with CPack under <em>install</em>. (NSIS installer under windows, Debian package under linux)</li>
    </ul>
  </li>
</ul>

<h2>Running Feature tests</h2>

See the [Cucumber-cpp documentation] (https://github.com/cucumber/cucumber-cpp) on how to run the feature tests with cucumber.

<h2>Sonar Metrics</h2>

In order to generate the code metrics and use sonar for publishing the metrics, [sonar-runner](http://docs.codehaus.org/display/SONAR/Installing+and+Configuring+Sonar+Runner), [cppcheck] (http://cppcheck.sourceforge.net/), [valgrind] (http://valgrind.org/) (Linux only) and [Rough Auditing Tool for Security (RATS)] (http://code.google.com/p/rough-auditing-tool-for-security/) (Linux only) are needed. 
On the sonar server the [C++ Community Plugin](http://docs.codehaus.org/pages/viewpage.action?pageId=185073817) should be installed.

*/

